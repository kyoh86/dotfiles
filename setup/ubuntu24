#!/bin/bash

# Usage:
#
# =============================================================
# # 1. Prepare Ubuntu 24.04 in WSL:
# =============================================================
#
# $ wsl --install --distribution Ubuntu-24.04 --no-launch
#
# =============================================================
# # 2. Move the virtual machine storage too another location.
# =============================================================
#
# If I need to move the virtual machine to another location, I can use the following command:
#
# ```console
# $ wsl
# $ mkdir -p E:\wsl\images
# $ wsl --export Ubuntu-24.04 E:\wsl\images\Ubuntu-24.04.tar
# $ wsl --unregister Ubuntu-24.04
# $ wsl --import Ubuntu-24.04 E:\wsl\ubuntu24 E:\wsl\images\Ubuntu-24.04.tar
# ```
#
# And then, you can start the virtual machine with the following command:
#
# ```console
# $ wsl --distribution Ubuntu-24.04 --user kyoh86
# ```
#
# =============================================================
# # 3. Setup 
# =============================================================
#
# In Ubuntu:
# $ git clone https://github.com/kyoh86/dotfiles $HOME/Projects/github.com/kyoh86/dotfiles
# $ cd $HOME/Projects/github.com/kyoh86/dotfiles
# $ ./setup/ubuntu24
#
# =============================================================
# # 4. Link to hosts
# =============================================================
#
# In Ubuntu:
# ```console
# $ ln -s /mnt/c/Users/xxxxx /home/kyoh86/Host
# ```

set -ex

cat - << EOS | sudo tee /etc/wsl.conf
[boot]
systemd=true

[user]
default=kyoh86

[interop]
appendWindowsPath=true

[wsl2]
memory=16GB
networkingMode=mirrored
firewall=true
autoProxy=true
EOS

echo "Enter the **PUBLIC** email address for GitHub Account you want to use:"
read GITHUB_EMAIL

echo "Enter the user name for GitHub Account you want to use:"
read GITHUB_NAME

# Initial apt update & upgrade
sudo apt update
sudo apt upgrade --yes

# Library
sudo apt install --yes \
    language-pack-ja \
    language-pack-en

# Set locale
sudo localedef -i /usr/share/i18n/locales/ja_JP -f UTF-8 /usr/lib/locale/ja_JP.UTF-8
sudo localedef -i /usr/share/i18n/locales/en_US -f UTF-8 /usr/lib/locale/en_US.UTF-8
sudo localedef --add-to-archive /usr/lib/locale/ja_JP.UTF-8 || :
sudo localedef --add-to-archive /usr/lib/locale/en_US.UTF-8 || :
sudo localectl set-locale LANG=ja_JP.UTF-8
source /etc/locale.conf

# Nix + Home Manager
install_nix() {
  if [ -x "$(command -v nix)" ]; then
    return;
  fi

  sh <(curl -L https://nixos.org/nix/install) --daemon
  . /home/kyoh86/.nix-profile/etc/profile.d/nix.sh

  nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
  nix-channel --update

  nix-shell '<home-manager>' -A install
}
install_nix

# Generate a new SSH key for github.com
generate_ssh_key() {
  SSH_KEY_PATH="${HOME}/.ssh/github_ed25519"
  if [ -f "${SSH_KEY_PATH}" ]; then
    return;
  fi

  mkdir -p ~/.ssh
  ssh-keygen -t ed25519 -C "${GITHUB_EMAIL}" -f "${SSH_KEY_PATH}"

  # ref: https://docs.github.com/ja/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
}
generate_ssh_key

# Setup key and sign for GitHub CLI
auth_github_cli() {
  if gh auth status --hostname github.com; then
    return;
  fi
  gh auth login --web --git-protocol https --hostname github.com --skip-ssh-key --scopes admin:public_key,admin:ssh_signing_key
}
auth_github_cli

# Get profiles
get_profiles() {
  MACHINE_NAME="$(uname -n)"

  source <(cat /etc/os-release | sed 's/^/local /')
  OS_NAME="${NAME}"
}

# Upload SSH key (auth/sign) to GitHub
upload_ssh_key() {
  SSH_KEY_PATH="${HOME}/.ssh/github_ed25519.pub"
  if [ ! -f "${SSH_KEY_PATH}" ]; then
    return 1;
  fi

  get_profiles

  AUTH_KEY_TITLE="git-auth/${OS_NAME}/${MACHINE_NAME}"
  if gh api /user/keys --jq '.[].title' | grep -xFe "${AUTH_KEY_TITLE}" >/dev/null ; then
    :
  else
    gh ssh-key add --title "${AUTH_KEY_TITLE}"  --type "authentication" "${SSH_KEY_PATH}"
  fi

  SIGN_KEY_TITLE="git-sign/${OS_NAME}/${MACHINE_NAME}"
  if gh api /user/ssh_signing_keys --jq '.[].title' | grep -xFe "${SIGN_KEY_TITLE}" >/dev/null ; then
    :
  else
    gh ssh-key add --title "${SIGN_KEY_TITLE}" --type "signing" "${SSH_KEY_PATH}"
  fi
}
upload_ssh_key

# Clone dotfiles
clone_dotfiles() {
  DOTFILES_DIR="${HOME}/Projects/github.com/kyoh86/dotfiles"
  [ -d "${DOTFILES_DIR}" ] || git clone --branch ubuntu https://github.com/kyoh86/dotfiles "${DOTFILES_DIR}"
  rm -rf ~/.config
  ln -s "${DOTFILES_DIR}" ~/.config
  cat << EOS > ~/.config/git/host.conf
[user]
  name = ${GITHUB_NAME}
  email = ${GITHUB_EMAIL}
  signingkey = ${HOME}/.ssh/github_ed25519.pub

[github]
  user = ${GITHUB_NAME}
EOS
}
clone_dotfiles

# Add the SSH key to the ssh-agent
mkdir -p ~/.ssh && echo 'Include ~/.config/ssh/*.conf' >> ~/.ssh/config

# Development Environment
sudo apt install --yes \
    telnet         \
    tidy           \
    man-db

# for git send-email
sudo apt install --yes  \
  git-email             \
  libio-socket-ssl-perl \
  libauthen-sasl-perl

# sudo groupadd docker # it may be error "groupadd: group 'docker' already exists" because docker AUR creates it. 
sudo usermod -aG docker ${USER}

# Neovim
install_neovim() {
  if [ -x "$(command -v nvim)" ]; then
    return;
  fi
  sudo apt install --yes \
      make    \
      cmake   \
      gettext
  eval "$(luarocks --lua-version=5.1 path)"
  nvim_tmpdir="$(mktemp -d)"
  trap "sudo rm -rf $nvim_tmpdir" EXIT
  git clone --depth 1 -b nightly https://github.com/neovim/neovim "$nvim_tmpdir/neovim"
  pushd "$nvim_tmpdir/neovim"
  make CMAKE_BUILD_TYPE=Release
  sudo make install
  popd
}
install_neovim

# zenhan.exe
install_zenhan() {
  gh --repo kyoh86/zenhan release download -p '*.exe' -O ~/.local/bin/zenhan.exe
  chmod +x ~/.local/bin/zenhan.exe 
}
install_zenhan

# gordon
export PATH="$PATH:/home/kyoh86/go/bin:/home/kyoh86/.local/bin"
go install github.com/kyoh86/gordon@latest
gordon install kyoh86/gordon
gordon restore ~/.config/gordon/bundle
rm -f ~/go/bin/gordon || :
