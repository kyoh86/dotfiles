#!/bin/bash

# Usage:
#
# =============================================================
# # 0. Prepare Arch Linux in WSL:
# =============================================================
#
# https://blog.yukirii.dev/wsl2-arch-linux/
#
# =============================================================
# # 1. Setup git
# =============================================================
# 
# 1. Generate a new SSH key
#     - `mkdir -p ~/.ssh`
#     - ssh-keygen
#         - `github_email=xxxx`
#         - `ssh-keygen -t ed25519 -C "${github_email}" -f "${HOME}/.ssh/github_ed25519"`
#     - `echo 'Include ~/.config/ssh/*.conf' >> ~/.ssh/config`
#     - seealso: https://docs.github.com/ja/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
# 2. Add a new SSH key to GitHub
#     - https://docs.github.com/ja/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account
# 3. Import GPG public & secret key
#     - (see password manager)
#     - Set path for gpg: `export GNUPGHOME=$HOME/.config/gnupg`
#     - Import public key: `gpg --import xxxxxxxx.pub`
#     - Import secret key: `gpg --import xxxxxxxx`
#     - See key-id for git/host.conf: `gpg --list-keys --keyid-format LONG`
# 4. Set user name & gpg key
#     - Write `~/.config/git/host.conf` like below
#
# ```
# [user]
# 	name = kyoh86
# 	email = xxx@example.com
# 	signingkey = XXXXXXXXXXXXXXXX
# 
# [github]
# 	user = kyoh86
# ```
# 
# =============================================================
# # 2. Clone dotfiles
# =============================================================
# 
# ```console
# $ git clone https://github.com/kyoh86/dotfiles ~/Projects/github.com/kyoh86/dotfiles
# $ ln -s "$HOME/Projects/github.com/kyoh86/dotfiles" "$HOME/.config"
# ```
# 
# =============================================================
# # 3. Call setup
# =============================================================
# 
# ```console
# $ ~/.config/setup/arch
# ```
# 
# =============================================================
# # 4. Link to hosts
# =============================================================
# 
# ```console
# $ ln -s /mnt/c/Users/xxxxx /home/kyoh86/Host
# ```

set -ex

sudo pacman -Syy

# rust
curl https://sh.rustup.rs -sSf | sh
export PATH="${PATH}:/home/kyoh86/.cargo/bin"
rustup default stable

# AUR helper
sudo pacman -Sy --needed --noconfirm \
  base-devel   \
  openssh      \
  git

# paru
if command -v paru ; then
  :
else
  paru_tmpdir="$(mktemp -d)"
  git clone https://aur.archlinux.org/paru.git "$paru_tmpdir"
  cd "$paru_tmpdir"
  makepkg -si --noconfirm
  cd -
fi

# Compile & Build
paru -Sy --noconfirm \
  autoconf        \
  gnupg           \
  lsb-release     \
  automake        \
  cmake           \
  make            \
  fakeroot        \
  gettext         \
  kcc             \
  ncurses         \
  ninja

# Enhance Shell
paru -Sy --noconfirm      \
  binutils                \
  coreutils               \
  diffutils               \
  findutils               \
  direnv                  \
  inotify-tools           \
  man-db                  \
  pass                    \
  zsh                     \
  zsh-autosuggestions     \
  zsh-syntax-highlighting

# Development Environment
paru -Sy --noconfirm \
  asciinema          \
  curl               \
  httpie             \
  jq                 \
  openssh            \
  patch              \
  ripgrep            \
  sed                \
  tidy               \
  tig                \
  wget               \
  github-cli         \
  git-delta          \
  mongosh-bin        \
  aws-cli-v2

# for git send-email
paru -Sy --noconfirm \
  perl-io-socket-ssl \
  perl-authen-sasl

# Programming Languages
paru -Sy --noconfirm \
  go       \
  deno     \
  lua      \
  coursier \
  luajit   \
  luarocks

# Docker
paru -Sy --noconfirm \
  docker             \
  docker-compose     \
# sudo groupadd docker # it may be error "groupadd: group 'docker' already exists" because docker AUR creates it. 
sudo usermod -aG docker ${USER}
newgrp docker

# wslu (WSL Utilities includes wslview, etc.)
sudo pacman-key --init
wget https://pkg.wslutiliti.es/public.key
sudo pacman-key --add public.key
sudo pacman-key --lsign-key 2D4C887EB08424F157151C493DD50AA7E055D853
if grep -e wslutilities /etc/pacman.conf ; then
  :
else
  echo "[wslutilities]" | sudo tee -a /etc/pacman.conf
  echo "Server = https://pkg.wslutiliti.es/arch/" | sudo tee -a /etc/pacman.conf
fi
paru -Sy && paru -S --noconfirm wslu

# ASDF
paru -Sy --noconfirm \
  asdf-vm
. /opt/asdf-vm/asdf.sh

# python
asdf plugin add python
asdf install python latest
asdf global python latest system

# rust
asdf plugin add rust
asdf install rust latest
asdf global rust latest system

# node & npm
asdf plugin add nodejs
asdf install nodejs latest
asdf global nodejs latest system

# Neovim
eval "$(luarocks --lua-version=5.1 path)"
nvim_tmpdir="$(mktemp -d)"
trap "sudo rm -rf $nvim_tmpdir" EXIT
git clone --depth 1 -b nightly https://github.com/neovim/neovim "$nvim_tmpdir/neovim"
pushd "$nvim_tmpdir/neovim"
make CMAKE_BUILD_TYPE=Release
sudo make install
popd

# SKK
skkdir="${HOME}/.local/share/skk"
skkfile="SKK-JISYO.L"
mkdir -p "${skkdir}"
curl -L --output "${skkdir}/${skkfile}" "https://github.com/skk-dev/dict/blob/master/${skkfile}?raw=true"

# gordon
export PATH="$PATH:/home/kyoh86/go/bin"
go install github.com/kyoh86/gordon@latest
gordon install kyoh86/gordon
rm ~/go/bin/gordon
gordon restore ~/.config/gordon/bundle


# stylua
cargo install stylua

# scalafmt
coursier install scalafmt

# AWS CLI
AWS_CLI_TEMPDIR="$(mktemp -d)"
pushd "$AWS_CLI_TEMPDIR"
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
git clone https://github.com/aws/session-manager-plugin.git
cd session-manager-plugin
gofmt -l "$(pwd)/src" | xargs -n1 gofmt -w
make release
mkdir -p $HOME/.local/bin
mv "./bin/$(go env GOHOSTOS)_$(go env GOHOSTARCH)_plugin/session-manager-plugin" $HOME/.local/bin/session-manager-plugin
popd
rm -rf "$AWS_CLI_TEMPDIR"

# actionlint
go install github.com/rhysd/actionlint/cmd/actionlint@latest 

# molt (Update checker for deno dependencies)
deno install --global --allow-env --allow-read --allow-write --allow-net --allow-run=git,deno --name molt jsr:@molt/cli
