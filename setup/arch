#!/bin/bash

# Usage:
#
# =============================================================
# # 1. Prepare Arch Linux in WSL:
# =============================================================
#
# https://zenn.dev/wagomu/articles/20240802wsl2-archlinux
# https://zenn.dev/kyoh86/articles/4bf6513aabe517
#
# =============================================================
# # 2. Move the virtual machine storage too another location.
# =============================================================
#
# If I need to move the virtual machine to another location, I can use the following command:
#
# ```console
# $ wsl
# $ mkdir -p E:\wsl\images
# $ wsl --export Ubuntu-24.04 E:\wsl\images\Ubuntu-24.04.tar
# $ wsl --unregister Ubuntu-24.04
# $ wsl --import Ubuntu-24.04 E:\wsl\ubuntu24 E:\wsl\images\Ubuntu-24.04.tar
# ```
#
# And then, you can start the virtual machine with the following command:
#
# ```console
# $ wsl --distribution Ubuntu-24.04 --user kyoh86
# ```
#
# =============================================================
# # 3. Setup 
# =============================================================
#
# In Arch:
# $ git clone https://github.com/kyoh86/dotfiles $HOME/Projects/github.com/kyoh86/dotfiles
# $ cd $HOME/Projects/github.com/kyoh86/dotfiles
# $ ./setup/ubuntu24
#
# =============================================================
# # 4. Link to hosts
# =============================================================
#
# In Ubuntu:
# ```console
# $ ln -s /mnt/c/Users/xxxxx /home/kyoh86/Host
# ```

set -ex

cat - << EOS | sudo tee /etc/wsl.conf
[boot]
systemd=true

[user]
default=kyoh86

[interop]
appendWindowsPath=true

[wsl2]
memory=16GB
networkingMode=mirrored
firewall=true
autoProxy=true
EOS

if [ -z "$GITHUB_EMAIL" ]; then
	echo "Enter the **PUBLIC** email address for GitHub Account you want to use:"
	read GITHUB_EMAIL
fi

if [ -z "$GITHUB_NAME" ]; then
	echo "Enter the user name for GitHub Account you want to use:"
	read GITHUB_NAME
fi

sudo pacman -Syy

setup_yay() {
  if [ -x "$(command -v yay)" ]; then
    return;
  fi
  local DIR="$(mktemp -d)"
  pushd "$DIR"
    sudo pacman -S --needed --no-confirm git base-devel
    git clone https://aur.archlinux.org/yay.git
    cd yay
    makepkg -si
  popd
}
setup_yay

install() {
  yay -Sy --noconfirm --needed $*
}

# AUR helper
setup_aur() {
  install \
    base-devel   \
    openssh      \
    git
}
setup_aur

# Compile & Build
setup_compilers() {
  install      \
    autoconf     \
    automake     \
    cmake        \
    make         \
    fakeroot     \
    gettext      \
    ninja
}
setup_compilers

# Setup ZSH and make it default shell
setup_zsh() {
  install \
      zsh \
      zsh-autosuggestions \
      zsh-syntax-highlighting

  CURRENT_LOGIN_SHELL="$(grep $USER /etc/passwd | cut -d: -f7)"
  if [ "${CURRENT_LOGIN_SHELL##*/}" = "zsh" ]; then
    return;
  fi

  chsh --shell "$(command -v zsh)"
}
setup_zsh

# Generate a new SSH key for github.com
generate_ssh_key() {
  SSH_KEY_PATH="${HOME}/.ssh/github_ed25519"
  if [ -f "${SSH_KEY_PATH}" ]; then
    return;
  fi

  mkdir -p ~/.ssh
  ssh-keygen -t ed25519 -C "${GITHUB_EMAIL}" -f "${SSH_KEY_PATH}"

  # ref: https://docs.github.com/ja/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
}
generate_ssh_key

# WSL Utilities includes wslview, etc.
setup_wslutilities() {
  sudo pacman-key --init
  install wget 
  wget https://pkg.wslutiliti.es/public.key
  sudo pacman-key --add public.key
  sudo pacman-key --lsign-key 2D4C887EB08424F157151C493DD50AA7E055D853
  if grep -e wslutilities /etc/pacman.conf ; then
    :
  else
    echo "[wslutilities]" | sudo tee -a /etc/pacman.conf
    echo "Server = https://pkg.wslutiliti.es/arch/" | sudo tee -a /etc/pacman.conf
  fi
  yay -Sy 
  install wslu
}
setup_wslutilities

# Install GitHub CLI
install github-cli

# Setup key and sign for GitHub CLI
auth_github_cli() {
  if gh auth status --hostname github.com; then
    return;
  fi
  # NOTE: needs wslu
  gh auth login --web --git-protocol https --hostname github.com --skip-ssh-key --scopes admin:public_key,admin:ssh_signing_key
}
auth_github_cli

# Get profiles
get_profiles() {
  MACHINE_NAME="$(hostname)"

  source <(cat /etc/os-release | sed 's/^/local /')
  OS_NAME="${NAME}"
}

# Upload SSH key (auth/sign) to GitHub
upload_ssh_key() {
  SSH_KEY_PATH="${HOME}/.ssh/github_ed25519.pub"
  if [ ! -f "${SSH_KEY_PATH}" ]; then
    return 1;
  fi

  get_profiles

  AUTH_KEY_TITLE="git-auth/${OS_NAME}/${MACHINE_NAME}"
  if gh api /user/keys --jq '.[].title' | grep -xFe "${AUTH_KEY_TITLE}" >/dev/null ; then
    :
  else
    gh ssh-key add --title "${AUTH_KEY_TITLE}"  --type "authentication" "${SSH_KEY_PATH}"
  fi

  SIGN_KEY_TITLE="git-sign/${OS_NAME}/${MACHINE_NAME}"
  if gh api /user/ssh_signing_keys --jq '.[].title' | grep -xFe "${SIGN_KEY_TITLE}" >/dev/null ; then
    :
  else
    gh ssh-key add --title "${SIGN_KEY_TITLE}" --type "signing" "${SSH_KEY_PATH}"
  fi
}
upload_ssh_key

# Clone dotfiles
clone_dotfiles() {
  DOTFILES_DIR="${HOME}/Projects/github.com/kyoh86/dotfiles"
  [ -d "${DOTFILES_DIR}" ] || git clone --branch ubuntu https://github.com/kyoh86/dotfiles "${DOTFILES_DIR}"
  rm -rf ~/.config
  ln -s "${DOTFILES_DIR}" ~/.config
  cat << EOS > ~/.config/git/host.conf
[user]
  name = ${GITHUB_NAME}
  email = ${GITHUB_EMAIL}
  signingkey = ${HOME}/.ssh/github_ed25519.pub

[github]
  user = ${GITHUB_NAME}
EOS
}
clone_dotfiles

# Add the SSH key to the ssh-agent
mkdir -p ~/.ssh && echo 'Include ~/.config/ssh/*.conf' >> ~/.ssh/config

# Development Environment
install            \
    aws-cli-v2     \
    binutils       \
    coreutils      \
    diffutils      \
    direnv         \
    dnsutils       \
    docker-compose \
    findutils      \
    git-delta      \
    httpie         \
    inotify-tools  \
    jq             \
    man-db         \
    ripgrep        \
    sed            \
    telnet         \
    tidy           \
    tig            \
    unzip          \
    wget

# Setup docker
sudo groupadd -f docker
sudo usermod -aG docker ${USER}

# for git send-email
install              \
  perl-io-socket-ssl \
  perl-authen-sasl

# Programming Languages
install       \
    go        \
    rustup    \
    deno      \
    lua5.4    \
    luajit    \
    luarocks

    ### molt (Update checker for Deno dependencies)
    deno install --global --allow-env --allow-read --allow-write --allow-net --allow-run=git,deno --name molt jsr:@molt/cli || :
    install stylua

# ASDF
# install asdf-vm
# . /opt/asdf-vm/asdf.sh
#
#   # python
#   asdf plugin add python
#   asdf install python latest
#   asdf global python latest system
#
#   # Node.js & npm
#   asdf plugin add nodejs
#   asdf install nodejs latest
#   asdf global nodejs latest system
#
#   # postgresql
#   install        \
#       libicu-dev \
#       pkgconf
#   export LC_ALL=ja_JP.UTF-8
#   asdf plugin add postgres
#   asdf install postgres latest
#   asdf global postgres latest system
#
#   # sqlite
#   asdf plugin add sqlite
#   asdf install sqlite latest
#   asdf global sqlite latest system
#
#   ## Terraform
#   asdf plugin add terraform
#   asdf install terraform latest
#   asdf global terraform latest system

# Neovim
install_neovim() {
  if [ -x "$(command -v nvim)" ]; then
    return;
  fi
  install     \
      make    \
      cmake   \
      gettext
  eval "$(luarocks --lua-version=5.1 path)"
  nvim_tmpdir="$(mktemp -d)"
  trap "sudo rm -rf $nvim_tmpdir" EXIT
  git clone --depth 1 -b nightly https://github.com/neovim/neovim "$nvim_tmpdir/neovim"
  pushd "$nvim_tmpdir/neovim"
  make CMAKE_BUILD_TYPE=Release
  sudo make install
  popd
}
install_neovim

# SKK
skkdir="${HOME}/.local/share/skk"
skkfile="SKK-JISYO.L"
mkdir -p "${skkdir}"
curl -L --output "${skkdir}/${skkfile}" "https://github.com/skk-dev/dict/blob/master/${skkfile}?raw=true"

# gordon
export PATH="$PATH:/home/kyoh86/go/bin:/home/kyoh86/.local/bin"
go install github.com/kyoh86/gordon@latest
gordon install kyoh86/gordon
gordon restore ~/.config/gordon/bundle
rm -f ~/go/bin/gordon || :

# actionlint
go install github.com/rhysd/actionlint/cmd/actionlint@latest 
